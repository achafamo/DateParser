import datefinder
import datetime
import requests
import csv
import sys
from  scrapeDepartment import *

MONTH_DICT = {"Jan. ": "January ",
              "Feb. ": "February ",
              "Mar. ": "March ",
              "Apr. ": "April ",
              "May. ": "May ",
              "Jun. ": "June ",
              "Jul. ": "July ",
              "Aug. ": "August ",
              "Sep. ": "September ",
              "Sept. ": "September ",
              "Oct. ": "October ",
              "Nov. ": "November ",
              "Dec. ": "December "}


def createEvents(filename, className):
    # class_time = get_time(filename)
    dates = []
    prev = None
    with open(filename, 'r') as f:
        for line in f:
            line = replaceAbbreviation(line)
            matches = datefinder.find_dates(line, source=False)

            for match in matches:
                event = Event(className, line, match)
                # print type(event.start_date)
                dates.append(event)
    return dates
    # After done getting the events, I need to post this to some url on


def get_time(filename):
    # should get the class time of the class for the given syllabus
    pass


def isEmpty(matches):
    try:
        date = matches.next()
        return False
    except StopIteration:
        return True


def writeToCsv(events, filename):
    '''
    should update events.csv
    '''


    output = "events.csv"
    with open(output, 'w') as f:
        writer = csv.DictWriter(f, ["start_date", "end_date", "name", "Class", "description"])
        writer.writeheader()
        for event in events:
            try:
                writer.writerow({'start_date': event.start_date.strftime('%Y-%m-%d %H:%M:%S'), 'Class': event.name,
                                 'description': event.description})
            except ValueError:
                print "problem with date format"
                continue


def replaceAbbreviation(line):
    # print line
    for m in MONTH_DICT.keys():
        line = line.replace(m, MONTH_DICT[m])
    # print line
    return line


def getCourseInfo(section):
    '''
    should update course.csv
    '''


    print section
    department = section.split()[0]
    print department
    url = get_url(department)
    courses = scrape(url, department)
    for course in courses:
        if course.section.strip() == section.strip():
            return course
    return False


class Event:
    def __init__(self, name, description, start_date, end_date=None):
        self.name = name
        self.description = description
        self.start_date = start_date

        if end_date:
            self.end_date = end_date

    def __str__(self):
        # print str(self.start_date)
        return self.name + " " + self.description + " " + str(self.start_date)


if __name__ == '__main__':

    try:
        sys.argv[1]
    except IndexError:
        section = "COSC 304 A"
    else:
        section = sys.argv[1]

    course = getCourseInfo(section)
    classname = course.name + " (" + course.section + ")"
    filename = "syllabus.txt"

    print filename, classname
    events = createEvents(filename, classname)
    print len(events)
    writeToCsv(events, filename)



